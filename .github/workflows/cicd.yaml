name: 'GitOps-Native AWS Web Stack with Terraform Cloud & Slack Integration'

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: dev # Keep environment if you're using GitHub Environments for protection rules

    # --- MOVE ALL TF_VAR_ VARIABLES HERE TO THE JOB-LEVEL ENV BLOCK ---
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # Keep Slack webhook here
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }} # Move TFC API token here as well

      # Terraform Input Variables (TF_VAR_ prefix, referencing UN-prefixed GitHub Secrets)
      TF_VAR_vpc_cidr_block: ${{ secrets.VPC_CIDR_BLOCK }}
      TF_VAR_env_prefix: ${{ secrets.ENV_PREFIX }}
      TF_VAR_az_count: ${{ secrets.AZ_COUNT }} # If you want to explicitly pass it, ensure AZ_COUNT secret exists
      TF_VAR_my_ip: ${{ secrets.MY_IP }}
      TF_VAR_instance_type: ${{ secrets.INSTANCE_TYPE }}
      TF_VAR_public_key_location: ${{ secrets.PUBLIC_KEY_LOCATION }}
      TF_VAR_domain_name: ${{ secrets.DOMAIN_NAME }}

      # AWS Credentials (if you prefer passing via GH Actions env vars instead of TFC workspace)
      # If you've configured AWS credentials directly in TFC workspace, you can remove these.
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


    defaults:
      run:
        shell: bash

    steps:
    - uses: act10ns/slack@v2
      with:
        status: Deploment to AWS started
        channel: '#gitaction_slack_terra_aws_status_alert'
        message: Starting Infrastructure Provisioning and Application Deployment to AWS ...
      if: always()

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        # The TFC token is now in the job-level env, setup-terraform will pick it up
        # This cli_config_credentials_token is redundant if TF_API_TOKEN is set as env var.
        # It's good practice to stick to one method. Let's remove this line for clarity,
        # as TF_API_TOKEN at the job level will configure the CLI.
        # cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # --- DEBUGGING STEP 1: Verify Environment Variables in GitHub Actions Runner (Keep this temporarily!) ---
    - name: Debug: List All Environment Variables
      run: |
        echo "All environment variables available to the GitHub Actions runner (excluding highly sensitive ones):"
        env | grep -v 'AWS_SECRET_ACCESS_KEY' | grep -v 'SLACK_WEBHOOK_URL' | grep -v 'TF_API_TOKEN' | grep -v 'PUBLIC_KEY_LOCATION'
        echo "--- End All Env Var Debug ---"
      # IMPORTANT: Remove this step after successful debugging for security.
    - name: Terraform Init
    
      # All TF_VAR_ and AWS credentials are now at the job level, no need for step-level env
    - name: Terraform Plan
      run: terraform plan -input=false
      # All TF_VAR_ and AWS credentials are now at the job level, no need for step-level env
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      # All TF_VAR_ and AWS credentials are now at the job level, no need for step-level env
    - uses: act10ns/slack@v2
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#gitaction_slack_terra_aws_status_alert'
      if: always()