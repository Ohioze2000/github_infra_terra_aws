name: 'GitOps-Native AWS Web Stack with Terraform Cloud & Slack Integration'

on:
  push:
    branches: [ "main" ]

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    environment: dev

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    - uses: act10ns/slack@v2
      with:
          status: Deploment to AWS started
          channel: '#gitaction_slack_terra_aws_status_alert'
          message: Starting Infrastructure Provisioning and Application Deployment to AWS ...
      if: always()
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    - name: Debug env var
      run: |
        echo "instance_type is $TF_VAR_instance_type"
      env:
        TF_VAR_instance_type: ${{ secrets.TF_VAR_INSTANCE_TYPE }}
        TF_VAR_vpc_cidr_block: ${{ secrets.TF_VAR_VPC_CIDR_BLOCK }}
        TF_VAR_env_prefix: ${{ secrets.TF_VAR_ENV_PREFIX }}
        TF_VAR_my_ip: ${{ secrets.TF_VAR_MY_IP }}
        TF_VAR_public_key_location: ${{ secrets.TF_VAR_PUBLIC_KEY_LOCATION }}
        TF_VAR_domain_name : ${{ secrets.TF_VAR_DOMAIN_NAME }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_vpc_cidr_block: ${{ secrets.TF_VAR_VPC_CIDR_BLOCK }}
          TF_VAR_env_prefix: ${{ secrets.TF_VAR_ENV_PREFIX }}
          TF_VAR_my_ip: ${{ secrets.TF_VAR_MY_IP }}
          TF_VAR_instance_type: ${{ secrets.TF_VAR_INSTANCE_TYPE }}
          TF_VAR_public_key_location: ${{ secrets.TF_VAR_PUBLIC_KEY_LOCATION }}
          TF_VAR_domain_name : ${{ secrets.TF_VAR_DOMAIN_NAME }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_vpc_cidr_block: ${{ secrets.TF_VAR_VPC_CIDR_BLOCK }}
          TF_VAR_env_prefix: ${{ secrets.TF_VAR_ENV_PREFIX }}
          TF_VAR_my_ip: ${{ secrets.TF_VAR_MY_IP }}
          TF_VAR_instance_type: ${{ secrets.TF_VAR_INSTANCE_TYPE }}
          TF_VAR_public_key_location: ${{ secrets.TF_VAR_PUBLIC_KEY_LOCATION }}
          TF_VAR_domain_name : ${{ secrets.TF_VAR_DOMAIN_NAME }}

    - uses: act10ns/slack@v2
      with:
          status: ${{ job.status }}
          steps: ${{ toJson(steps) }}
          channel: '#gitaction_slack_terra_aws_status_alert'
      if: always()